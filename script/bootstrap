#!/usr/bin/env bash
#
# bootstrap installs things.

PACKAGE=${1:-'all'}
DOTFILES_ROOT="`pwd`"

set -e

# Utility Functions {{{
################################################################################
info () {
  printf "  [ \033[00;34mInfo\033[0m ] $1"
}

warn () {
  printf "  [ \033[00;35mWarn\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m????\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32m OK \033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

not_installed() {
  NAME=$1
  FILE=$2
  if [[ -e $FILE ]]; then
	  echo
	  warn "Module [$NAME] already configured\n"
	  success "Module [$NAME] installation: COMPLETED\n"
	  return 1
  fi
  return 0
}

is_installed() {
  NAME=$1
  FILE=$2
  if [[ -e $FILE ]]; then
	  echo
	  success "Module [$NAME] installation: COMPLETED\n"
	  return 0
  fi
  warn "Module [$NAME] installation: FAILED\n"
  return 1
}

config_link() {
  FOLDER=$1
  [[ -d ~/.config ]] || mkdir ~/.config
  ln -s $FOLDER ~/.config/
}
# }}}

# Modules {{{

# Git {{{
################################################################################
setup_git () {
  [ ! -f git/gitconfig.symlink ] || return 0
  echo

  info "Setup git tools...\n"
  sudo aptitude install \
	git gitk git-gui \
	tig git-flow \

  info "Setup gitconfig...\n"
  git_credential='cache'
  if [ "$(uname -s)" == "Darwin" ]
  then
    git_credential='osxkeychain'
  fi

  user ' - What is your GIT author name?'
  read -e git_authorname
  user ' - What is your GIT author email?'
  read -e git_authoremail
  user ' - What is your GIT sign key?'
  read -e git_authorkey
  user ' - What is your GitHub username?'
  read -e git_github_username
  user ' - What is your system username?'
  read -e git_username

  sed -e "s/AUTHORNAME/$git_authorname/g" \
      -e "s/AUTHOREMAIL/$git_authoremail/g" \
      -e "s/AUTHORKEY/$git_authorkey/g" \
      -e "s/GITHUBUSER/$git_github_username/g" \
      -e "s/USERNAME/$git_username/g" \
      -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" \
      git/gitconfig.symlink.example > git/gitconfig.symlink

  success 'git'
}
# }}}

# Shell {{{
################################################################################
setup_zsh() {
  [ ! -d zsh/oh-my-zsh ] || return 0
  echo

  info "Setup ZShell...\n"
  sudo aptitude install zsh
  git clone git://github.com/robbyrussell/oh-my-zsh.git zsh/oh-my-zsh

  info "Seting [$(which zsh)] as deafult shell..."
  chsh -s $(which zsh)

  success "zsh"
}

setup_fonts() {
echo
echo -n 'Do you want to download patched fonts? [N/y]: '
read RESP
[ x${RESP,,} == xy ] || return 0
echo 'Download patched fonts...'
[ -d $DOTFILES_ROOT/fonts ] || mkdir $DOTFILES_ROOT/fonts
cd $DOTFILES_ROOT/fonts
wget https://github.com/Lokaltog/powerline/raw/develop/font/PowerlineSymbols.otf
wget https://github.com/Lokaltog/powerline/raw/develop/font/10-powerline-symbols.conf
echo 'Updating fonts cache [~/.fonts]...'
[ -d ~/.fonts ] || mkdir ~/.fonts
ln -fs $DOTFILES_ROOT/tmux/PowerlineSymbols.otf ~/.fonts/PowerlineSymbols.otf
fc-cache -vf ~/.fonts
echo 'Setup fontconfig...'$DOTFILES_ROOT/tmux/
[ -d ~/.fonts.conf.d ] || mkdir ~/.fonts.conf.d
[ -d ~/.config/fontconfig/conf.d/ ] || mkdir -p ~/.config/fontconfig/conf.d
ln -fs $DOTFILES_ROOT/tmux/10-powerline-symbols.conf ~/.fonts.conf.d/10-powerline-symbols.conf
ln -fs $DOTFILES_ROOT/tmux/10-powerline-symbols.conf ~/.config/fontconfig/conf.d/10-powerline-symbols.conf
}
# }}}

# VIM {{{
################################################################################
setup_vim() {
  [ ! -d $DOTFILES_ROOT/vim/bundle/vundle ] || return 0
  echo

  info 'Setup VIM (using vundle)\n'
  [ -d $DOTFILES_ROOT/vim/bundle ] || mkdir $DOTFILES_ROOT/vim/bundle
  cd $DOTFILES_ROOT/vim/bundle
  git clone https://github.com/gmarik/vundle.git

  cd $DOTFILES_ROOT
  ln -fs $DOTFILES_ROOT/vim ~/.vim
  vim +BundleInstall +qall

  success 'vim'
}
# }}}

# GunPG {{{
################################################################################
setup_gpg() {
  echo

  info 'Setup GPG\n'
  if [ -f ~/.gnupg/secring.gpg ]; then
    info "Using existing GPG keyring [~/.gnupg/secring.gpg]\n"
    gpg -K
  else
    info "Setting up new GPG keyring...\n"
    gpg --gen-key
  fi

  success 'gpg'
}
# }}}

# Mail {{{
################################################################################
setup_mutt() {
  info 'Setup MUTT\n'

  sudo aptitde install \
	mutt msmtp \
  	offlineimap imapfilter \
  	isync \
	ldap-utils procmail

  # Setup your accounts
  info 'Setup MUTT configuration...'
  if [ -z $EDITOR ]; then
    warn ' Please, edit [~/dotfiles/mutt/muttrc.symlink] to setup your\n'
    warn ' incoming/outgoing server accounts'
    warn ' Press a key once done... '
    read
  else
    warn ' Press a key to edit you MUTT configuration '
    read -n 1
    $EDITOR ~/dotfiles/mutt/muttrc.symlink
  fi

  # Setup your signature
  info 'Setup Signature...'
  if [ -z $EDITOR ]; then
    warn ' Please, edit [~/dotfiles/mutt/signature] to setup your signature!\n'
    warn ' Press a key once done... '
    read
  else
    warn ' Press a key to edit you email signature '
    read -n 1
    $EDITOR ~/dotfiles/mutt/signature
  fi
  success 'Using email signature:'
  cat ~/dotfiles/mutt/signature

  info 'Setup folders...'
  umask 077
  mkdir -p ~/.mutt/cache

  success 'MUTT'
}

setup_imap() {

  info 'Setup EMail account'

  user ' - What is the account name?'
  read -e imap_account
  user ' - What is your IMAP server?'
  read -e imap_server
  user ' - What is your IMAP username?'
  read -e imap_username

  info 'Setup autentication tokens using GNOME keyring\n'
  ~/dotfiles/bin/gnome_keyring.py imap_$imap_account $imap_username

  # info 'Setup IMAP Filter\n'
  # ln -fs $DOTFILES_ROOT/imapfilter ~/.imapfilter
  # sed -e "s/IMAPACCOUNT/$imap_account/g" \
  #     imapfilter/config.lua.example > imapfilter/config.lua
  # success 'imapfilter'

  info 'Setup isync IMAP\n'
  sed -e "s/IMAPACCOUNT/$imap_account/g" \
      -e "s/IMAPSERVER/$imap_server/g" \
      -e "s/IMAPUSER/$imap_username/g" \
      isync/mbsyncrc.symlink.example > mbsyncrc.symlink.symlink
  success 'isync'

  # info 'Setup Offiline IMAP\n'
  # sed -e "s/IMAPACCOUNT/$imap_account/g" \
  #     -e "s/IMAPSERVER/$imap_server/g" \
  #     offlineimap/offlineimaprc.symlink.example > offlineimaprc.symlink
  # success 'OfflineIMAP'

}
# }}}

# IRC {{{
################################################################################
setup_irssi() {
  info 'Setup IRSSI configuration...\n'
  [ -d ~/.irssi ] && rm -rf ~/.irssi
  ln -fs ~/dotfiles/irssi ~/.irssi
}

setup_weechat() {
  info 'Setup WeeChat configuration'
  [ -d ~/.weechat ] && rm -rf ~/.weechat
  ln -fs ~/dotfiles/weechat ~/.weechat
}
# }}}

# Console tools {{{
################################################################################
setup_ranger() {
  [[ ! -f ~/.config/ranger ]] || return 0
  echo
  info 'Setup RANGER configuration...\n'

  [ ! -d ~/.config/ranger ] || rm -rf ~/.config/ranger
  [ -d ~/.config ] || mkdir ~/.config
  ln -s ~/dotfiles/ranger ~/.config/ranger

  success "ranger"
}

setup_gist() {
  info 'Installing Gist'
  sudo getm install gist

  info 'Login to your gist account'
  gist --login

  success "gist"

}

setup_fzf() {
  [ ! -d ~/dotfiles/fzf ] || return 0
  echo
  info 'Setup FuzzyFinder'

  git clone https://github.com/junegunn/fzf.git --depth 1 ~/dotfiles/fzf
  ln -s ~/dotfiles/fzf ~/.fzf
  ~/.fzf/install

  success "fzf"
}

setup_console_tools() {
  not_installed console_tools ~/.config/terminator || return 0
  echo
  info "Install console tools...\n"

 # hwloc => lstopo|hwloc-ls
 # x11-xserver-utils => xrandr
 # sysfsutils => systool
 # silversearcher-ag => ag
 # inxi => inxi -v4 -c6 OR inxi -bDc 6
 # debianutils => run-parts

 sudo aptitude install \
	aterm screen tmux terminator \
	gawk sed moreutils \
	ranger	\
	debianutils \
	highlight caca-utils atool mediainfo odt2txt \
	autojump bc \
	htop iotop hwloc pv \
	powertop \
	x11-xserver-utils arandr xdotool xsel \
	usbutils \
	smartmontools \
	sysfsutils \
	tree \
	figlet \
	inxi \
	ttyrec \
	redshift \

  config_link ~/dotfiles/terminator

  is_installed console_tools ~/.config/terminator || return 0

}
# }}}

# Window Manager {{{
################################################################################
setup_i3() {
  not_installed i3 ~/.config/i3 || return 0
  echo
  info "Setup i3 Window Manager...\n"

  # procmail => lockfile
  sudo aptitude install \
	  i3-wm i3status suckless-tools \
	  lxappearance \
	  i3lock xautolock procmail \
	  redshift

  config_link ~/dotfiles/i3
  config_link ~/dotfiles/i3/i3status

  I3BAR_DISPLAY=$(xrandr | awk '/connected primary/{print $1}')
  info "Setting default display to $I3BAR_DISPLAY...\n"
  sed -i "s/ eDP1/ $I3BAR_DISPLAY/"

  for CARD in $(cat /sys/class/sound/card*/number); do
	  amixer -c $CARD get Speaker &>/dev/null || continue
	  [[ $? -ne 0 ]] || break
  done

  info "Map audio keys to card$CARD...\n"
  if [[ $CARD -ne 0 ]]; then
  	sed -i "s/amixer -c 0/amixer -c $CARD/" ~/dotfiles/i3/config
  	sed -i "s/amixer -c 0/amixer -c $CARD/" ~/dotfiles/bin/volume_toggle
  fi

  is_installed i3 ~/.config/i3 || return 0
}
# }}}

# Development {{{
################################################################################
setup_compile_tools() {
  echo
  info "Install host compiler...\n"
  sudo aptitude install \
	  build-essential \
	  autoconf automake libtool \
	  cmake ccache \
	  help2man

  success "compile_tools"
}

setup_python() {
  [[ $(dpkg -l | grep python-pip) ]] && return 0
  echo
  info 'Installing Python PIP'
  sudo aptitude install python-pip
  info 'installing additional python packages via PIP'
  sudo pip install --upgrade pyzmq jinja2 tornado ipython jupyter notebooktools numpy pandas markupsafe jsonschema gnomekeyring
}
# }}}

# Networking {{{
################################################################################
setup_vpn() {
  echo
  info "Install Juniper VPN...\n"

  sudo aptitude install \
	  openconnect \
	  python-netifaces \
	  python-pyasn1 \
	  python-pyasn1-modules \
	  python-mechanize \
	  python-urlgrabber \
	  python-pycurl \

  success "vpn"
}


setup_nettools() {
  echo
  info "Installing networking tools...\n"

  # uml-utilities => tunctl

  sudo aptitude install \
	iproute2 iptables netcat-openbsd \
	rsync tcpdump nmap \
	openssh-client openssh-server \
	curl wget axel \
	links2 \
	transmission \

  success "nettools"

}
# }}}

# Multimedia {{{
################################################################################
setup_multimedia() {

	sudo aptitude install \
		smplayer sox \
		gimp gimp-data-extras gimp-normalmap gimp-texturize \

	is_installed multimedia ~/dotfiles

}
# }}}

# }}} Modules

# Main {{{
################################################################################
if [[ $PACKAGE != 'all' ]]; then
	setup_$PACKAGE
	exit $?
fi
# }}}

# vim: set foldmethod=marker :
