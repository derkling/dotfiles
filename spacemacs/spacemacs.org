#+TITLE: Spacemacs tangled user configuration
#+STARTUP: headlines
#+STARTUP: nohideblocks
#+STARTUP: noindent
#+OPTIONS: toc:4 h:4
#+PROPERTY: header-args:emacs-lisp :comments link

* Introduction
  This is a tangled user-init and user-config file for spacemacs.

** init.el  
   
** spacemacs.org  
   
To add configuration options before Spacemacs loads, insert the following kind
of src block in your spacemacs.org file

#+BEGIN_SRC emacs-lisp :tangle user-init.el
#+END_SRC

Alternatively, if the block should be loaded after Spacemacs loads, insert the
following test block

#+BEGIN_SRC emacs-lisp :tangle user-config.el
#+END_SRC


* Helper Functions
** Yasnippet creation

To help with creation of your text blocks, there are two snippets defined in the
local snippet directory =~/.spacemacs.d/snippets/org-mode/= folder.

To tangle to the =user-init= file, type =ui=, alternatively =uc= to tangle the =user-config= file.

By default, yasnippet completions are triggered by pressing =M-/= with the point
after one of the supported prefix.

** Find this file
   Create binding to spacemacs.org file

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun spacemacs/find-config-file ()
    (interactive)
    (find-file (concat dotspacemacs-directory "/spacemacs.org")))

  (spacemacs/set-leader-keys "fec" 'spacemacs/find-config-file)

#+END_SRC


* Layers Configuration
** Default settings
   #+BEGIN_SRC emacs-lisp :tangle spacemacs-defaults.el
     (setq-default
      dotspacemacs-distribution 'spacemacs
      dotspacemacs-enable-lazy-installation 'unused
      dotspacemacs-ask-for-lazy-installation t
      dotspacemacs-configuration-layer-path '()
      dotspacemacs-install-packages 'used-only
     )
   #+END_SRC

** Layers to load
   #+BEGIN_SRC emacs-lisp :tangle spacemacs-layers.el
     (setq-default
      dotspacemacs-configuration-layers
      '(
	auto-completion
	better-defaults
	c-c++
	cscope
	emacs-lisp
	emoji
	git
	go
	gtags
	helm
	html
	javascript
	markdown
	(mu4e :variables
	      mu4e-installation-path "/usr/local/share/emacs/site-lisp/mu4e"
	      )
	org
	ranger
	shell
	spell-checking
	syntax-checking
	python
	version-control
	yaml
	)
      )
   #+END_SRC
   
** Initialization
   #+BEGIN_SRC emacs-lisp :tangle spacemacs-init.el
     (setq-default
      dotspacemacs-enable-emacs-pdumper nil
      dotspacemacs-emacs-pdumper-executable-file "emacs-27.0.50"
      dotspacemacs-emacs-dumper-dump-file "spacemacs.pdmp"
      dotspacemacs-elpa-https t
      dotspacemacs-elpa-timeout 5
      dotspacemacs-gc-cons '(100000000 0.1)
      dotspacemacs-use-spacelpa nil
      dotspacemacs-verify-spacelpa-archives nil
      dotspacemacs-check-for-update t
      dotspacemacs-elpa-subdirectory 'emacs-version
      dotspacemacs-editing-style 'vim
      dotspacemacs-verbose-loading nil
      dotspacemacs-startup-banner nil
      dotspacemacs-startup-lists '((recents . 5)
                                   (bookmarks . 5)
                                   (projects . 7))
      dotspacemacs-startup-buffer-responsive t
      dotspacemacs-scratch-mode 'text-mode
      dotspacemacs-initial-scratch-message nil
      dotspacemacs-themes '(spacemacs-dark
                            spacemacs-light)
      dotspacemacs-mode-line-theme '(spacemacs :separator wave :separator-scale 1.5)
      dotspacemacs-colorize-cursor-according-to-state t
      dotspacemacs-default-font '("Ubuntu Mono"
                                  :size 14 :weight normal :width normal)
      dotspacemacs-leader-key "SPC"
      dotspacemacs-emacs-command-key "SPC"
      dotspacemacs-ex-command-key ":"
      dotspacemacs-emacs-leader-key "M-m"
      dotspacemacs-major-mode-leader-key ","
      dotspacemacs-major-mode-emacs-leader-key "C-M-m"
      dotspacemacs-distinguish-gui-tab nil
      dotspacemacs-default-layout-name "Default"
      dotspacemacs-display-default-layout 't
      dotspacemacs-auto-resume-layouts nil
      dotspacemacs-auto-generate-layout-names nil
      dotspacemacs-large-file-size 1
      dotspacemacs-auto-save-file-location 'cache
      dotspacemacs-max-rollback-slots 5
      dotspacemacs-enable-paste-transient-state nil
      dotspacemacs-which-key-delay 0.2
      dotspacemacs-which-key-position 'bottom
      dotspacemacs-switch-to-buffer-prefers-purpose nil
      dotspacemacs-loading-progress-bar nil
      dotspacemacs-fullscreen-at-startup nil
      dotspacemacs-fullscreen-use-non-native nil
      dotspacemacs-maximized-at-startup nil
      dotspacemacs-active-transparency 90
      dotspacemacs-inactive-transparency 90
      dotspacemacs-show-transient-state-title t
      dotspacemacs-show-transient-state-color-guide t
      dotspacemacs-mode-line-unicode-symbols nil
      dotspacemacs-smooth-scrolling t
      dotspacemacs-line-numbers '(:relative t
	   		       :disabled-for-modes dired-mode pdf-view-mode
                                  :size-limit-kb 1000)
      dotspacemacs-folding-method 'evil
      dotspacemacs-smartparens-strict-mode nil
      dotspacemacs-smart-closing-parenthesis nil
      dotspacemacs-highlight-delimiters 'all
      dotspacemacs-enable-server nil
      dotspacemacs-server-socket-dir nil
      dotspacemacs-persistent-server nil
      dotspacemacs-search-tools '("rg" "ag" "pt" "ack" "grep")
      dotspacemacs-frame-title-format "%I@%S"
      dotspacemacs-icon-title-format nil
      dotspacemacs-whitespace-cleanup "trailing"
      dotspacemacs-zone-out-when-idle nil
      dotspacemacs-pretty-docs nil
      )
   #+END_SRC

** Additional custom functions
*** Mu4e Threads Folding
    There is a long standing discussion thread about adding a thread folding
    feature to mu4e:

    https://github.com/djcb/mu/pull/783

    The following code loads a set of mu4e extension functions which are a
    refactoring of the above PR.
    
    
* Initialization
#+BEGIN_SRC emacs-lisp :tangle user-init.el
;; Auto generated user initialization from tangled spacemacs.org

#+END_SRC

** Additional custom functions
*** Mu4e Threads Folding
    There is a long standing discussion thread about adding a thread folding
    feature to mu4e:

    https://github.com/djcb/mu/pull/783

    The following code loads a set of mu4e extension functions which are a
    refactoring of the above PR.
    
    
* Configuration
** General settings
   #+BEGIN_SRC emacs-lisp :tangle user-config.el
     ;; Set some sane defaults
     (setq-default
      indent-tabs-mode 't
      tab-width 8
      )

     ;; (defun no-junk-please-were-unixish ()
     ;;   (let ((coding-str (symbol-name buffer-file-coding-system)))
     ;;     (when (string-match "-\\(?:dos\\|mac\\)$" coding-str)
     ;;       (set-buffer-file-coding-system 'unix))))
     ;; (add-hook 'find-file-hooks 'no-junk-please-were-unixish)

     ;; Default settings
     (spacemacs/toggle-spelling-checking-off)
     (setq
      powerline-default-separator 'nil
      browse-url-generic-program "chrome-browser"
      ;; http://ergoemacs.org/emacs/emacs_set_default_browser.html
      browse-url-browser-function 'browse-url-chrome
      )
     (defun helm-browse-url (url &rest args)
       (helm-generic-browser url "google-chrome"))
   #+END_SRC

** Autocompletion
   #+BEGIN_SRC emacs-lisp :tangle user-config.el
     (setq 
      auto-completion-return-key-behavior 'complete
      auto-completion-tab-key-behavior 'cycle
      auto-completion-complete-with-key-sequence nil
      auto-completion-complete-with-key-sequence-delay 0.1
      auto-completion-idle-delay 0.2
      auto-completion-private-snippets-directory nil
      auto-completion-enable-snippets-in-popup t
      auto-completion-enable-help-tooltip t
      auto-completion-enable-sort-by-usage nil
      )
   #+END_SRC

** C-C++
   #+BEGIN_SRC emacs-lisp :tangle user-config.el
     (setq
      c-default-style '((java-mode . "java")
			(awk-mode . "awk")
			(python-mode . "python")
			(other . "linux")
			)
      )
   #+END_SRC

** CScope
   #+BEGIN_SRC emacs-lisp :tangle user-config.el
     (define-key evil-normal-state-map (kbd "C-t") 'helm-cscope-pop-mark)
   #+END_SRC

** Evil Mode
   #+BEGIN_SRC emacs-lisp :tangle user-config.el
     (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)
   #+END_SRC

** Magit
   #+BEGIN_SRC emacs-lisp :tangle user-config.el
     (global-git-commit-mode t)
     (setq
      ;; https://magit.vc/manual/magit/Performance.html
      magit-revision-insert-related-refs nil
      magit-refresh-status-buffer 't
      magit-commit-show-diff nil
      magit-revert-buffers 1
      magit-default-tracking-name-function 'magit-default-tracking-name-branch-only
      magit-log-section-arguments (list "-n50" "--decorate")
      magit-log-cutoff-length 50
      magit-revision-insert-related-refs nil
      magit-repository-directories '(("~/Code/" . 2))
      )
     (setq-default
      git-magit-status-fullscreen 't
      )
     (remove-hook 'magit-refs-sections-hook 'magit-insert-tags)
   #+END_SRC

*** GitLink
    #+BEGIN_SRC emacs-lisp :tangle user-config.el
      ;; Git link Linux kernel
      (defun git-link-linux (hostname dirname filename branch commit start end)
	(format "https://elixir.bootlin.com/linux/latest/source/%s"
		(concat filename
			(when start
			  (concat "#L" (format "%s" start))))))

      '(progn
	 ;; Example parameter for:
	 ;; hostname: git.kernel.org
	 ;; dirname:  pub/scm/linux/kernel/git/torvalds/linux
	 ;; filename: kernel/sched/pelt.c
	 ;; branch:   lkml/utilclamp_v11_debug
	 ;; commit:   a82eb017568a894b299341eb641fdd0f7ebbde91
	 ;; start:    81
	 ;; end:      nil
	 (add-to-list 'git-link-remote-alist
		      '("git\\.kernel\\.org" git-link-linux))
	 ; (add-to-list 'git-link-commit-remote-alist
	 ; 		    '("git\\.kernel\\.org" git-link-commit-linux))
	 )
    #+END_SRC

** Paradox
   #+BEGIN_SRC emacs-lisp :tangle user-config.el
     (setq
      paradox-github-token 'bbf1492c1c91e67c1f672ed2fa755b3662574d65
      )
   #+END_SRC

** GoLang
   #+BEGIN_SRC emacs-lisp :tangle user-config.el
     ;; The get a working installation and spacemacs integration:
     ;; 1. ensure to have the most recent version of go installed, usually under:
     ;;       /usr/local/go
     ;;    by following the installation instructions from, e.g.:
     ;;       https://golang.org/doc/install?download=go1.12.6.linux-amd64.tar.gz
     ;;
     ;; 2. symlink under a standard path to ensure spacemacs finds it
     ;;       $ sudo ln -s /usr/local/go/bin/go /usr/bin/go
     ;;
     ;; 3. open the go layer do (SPC h l RET go RET) and install all the required tools
     ;;    check they are all installed under the go workspace (~/go/bin)
     ;;
     ;; 4. for company-go autocompletion to work: make sure you have only one
     ;;    gocode binary, with:
     ;;       $ which -a gocode
     ;;    and that's the most updated version installed in your GOPATH, i.e.
     ;;       $ go get -u github.com/nsf/gocode
     ;;
     ;; The following two paths are to ensure we look at the most recently insalled
     ;; versions:

     (add-to-list 'exec-path "/home/derkling/go/bin/")
     (add-to-list 'exec-path "/usr/local/go/bin")
     (setq
      go-use-golangci-lint t
      godoc-at-point-function 'godoc-gogetdoc
      ;; set this to nil if you’re using .editorconfig in your project
      go-tab-width 4
      ;; Force formatting every time we save
      ;; NOTE: this could lead to unused imports to be removed
      go-format-before-save t
      gofmt-command "goimports"
      )
   #+END_SRC

** Gtags
   #+BEGIN_SRC emacs-lisp :tangle user-config.el
     (setq
      gtags-enable-by-default t
      )
   #+END_SRC

** Helm
   #+BEGIN_SRC emacs-lisp :tangle user-config.el
     (setq
      helm-M-x-fuzzy-match 't
      helm-position 'bottom
      helm-enable-auto-resize t
      )
   #+END_SRC
 
*** Keybindings 
    #+BEGIN_SRC emacs-lisp :tangle user-config.el
      (global-set-key (kbd "M-y") 'helm-show-kill-ring)
    #+END_SRC

** Mu4e
*** General Settings
    #+BEGIN_SRC emacs-lisp :tangle user-config.el
      (with-eval-after-load 'mu4e

	;; General user info
	(setq
	 user-full-name		"Patrick Bellasi"
	 user-mail-address	"patrick.bellasi@arm.com"
	 mu4e-reply-to-address	"patrick.bellasi@arm.com"
	 mu4e-user-mail-address-list '(
				       "derkling@gmail.com"
				       "patrick.bellasi@gmail.com"
				       "patrick.bellasi@arm.com"
				       )
	 ;; mu4e-compose-complete-only-personal t
	 ;; mu4e-compose-complete-only-after "2014-06-23"
	 ;; mu4e-compose-complete-ingore-address-regext "no-?reply"
	 )
	)
    #+END_SRC

*** Mailboxes
    #+BEGIN_SRC emacs-lisp :tangle user-config.el
      (with-eval-after-load 'mu4e
	(setq
	 mu4e-maildir (expand-file-name "~/Mail/Work")	;; top level maildir, cannot be a link
	 mu4e-sent-folder   "/Sent Items"			;; folder for sent messages
	 mu4e-drafts-folder "/Drafts"			;; unfinished messages
	 mu4e-trash-folder  "/Deleted Items"		;; trashed messages
	 mu4e-refile-folder "/Archive"			;; saved messages
	 )
	)
    #+END_SRC

*** Bookmarks
    #+BEGIN_SRC emacs-lisp :tangle user-config.el
      (with-eval-after-load 'mu4e
	(setq
	 mu4e-maildir-shortcuts '(("/INBOX"		. ?i)
				  ("/Sent Items"	. ?s)
				  ("/Archive"	. ?a)
				  ("/Deleted Items"	. ?t)
				  ("/Drafts"	. ?d))
	 )
	(add-to-list 'mu4e-bookmarks
		     (make-mu4e-bookmark
		      :name "LKML (last 2h)"
		      :query "date:2h..now"
		      :key ?k)
		     t)
	)
    #+END_SRC

*** Receiving Messages
    #+BEGIN_SRC emacs-lisp :tangle user-config.el
      (with-eval-after-load 'mu4e
	(setq
	 mu4e-get-mail-command "mbsync work"
	 mu4e-html2text-command "w3m -T text/html"
	 mu4e-update-interval 120
	 mu4e-headers-auto-update t
	 )
	)
    #+END_SRC

*** SpeedUp Indexing for large Mailboxes
    #+BEGIN_SRC emacs-lisp :tangle user-config.el
      (with-eval-after-load 'mu4e
	(setq
	 mu4e-index-cleanup nil	;; don't do a full cleanup check
	 mu4e-index-lazy-check t	;; don't consider up-to-date dirs
	 )
	)
    #+END_SRC

*** Customize Visualizations
    #+BEGIN_SRC emacs-lisp :tangle user-config.el
      (with-eval-after-load 'mu4e
	(setq
	 message-signature-file (expand-file-name "~/dotfiles/spacemacs/mu4e/signature")
	 mu4e-attachment-dir "/tmp"
	 mu4e-compose-signature-auto-include t
	 mu4e-headers-date-format "%e-%b"
	 mu4e-headers-include-related t
	 mu4e-headers-time-format "%k:%M"
	 mu4e-headers-skip-duplicates t
	 mu4e-headers-visible-lines 10
	 mu4e-view-auto-mark-as-read nil
	 mu4e-headers-fields '(
			       (:flags . 6)
			       (:human-date . 12)
			       (:from . 24)
			       (:subject))
	 mu4e-view-fields '(:subject :from :to :cc :date
				     :tags :attachments
				     :signature :decryption
				     :mailing-list :message-id)
	 )
	)

      ;;; colorize patch-based emails
      ;(require 'mu4e-patch)
      ;(add-hook 'mu4e-view-mode-hook #'mu4e-patch-highlight)
    #+END_SRC

*** Customize Actions
    #+BEGIN_SRC emacs-lisp :tangle user-config.el
      (with-eval-after-load 'mu4e
	(add-to-list 'mu4e-view-actions
		     '("ViewInBrowser" . mu4e-action-view-in-browser) t)

	;; ;; show images
	;; (setq mu4e-show-images t)
	;; ;; use imagemagick, if available
	;; (when (fboundp 'imagemagick-register-types)
	;;   (imagemagick-register-types))
	)

    #+END_SRC

*** Sending Messages
    #+BEGIN_SRC emacs-lisp :tangle user-config.el
      (with-eval-after-load 'mu4e
	(setq
	 message-send-mail-function 'smtpmail-send-it
	 smtpmail-starttls-credentials '(("foss.arm.com" 587 nil nil))
	 smtpmail-default-smtp-server "foss.arm.com"
	 smtpmail-smtp-server "foss.arm.com"
	 smtpmail-smtp-service 587
	 smtpmail-debug-info t
	 )
	)
    #+END_SRC

**** Customize sending
     #+BEGIN_SRC emacs-lisp :tangle user-config.el
       (with-eval-after-load 'mu4e

	 (setq
	  message-citation-line-function 'message-insert-formatted-citation-line
	  message-citation-line-format "On %a, %b %d, %Y at %T %z, %f wrote...\n"
	  message-signature-file (expand-file-name "~/dotfiles/emacs/mu4e/signature")
	  mu4e-compose-signature-auto-include t
	  ;; What do to for sent messages:
	  ;; - sent   : copy into "Sent Items"
	  ;; - delete : don't save message to Sent Messages, IMAP takes care of this
	  mu4e-sent-messages-behavior 'sent
	  )
	 )
     #+END_SRC

**** Keybindings
     #+BEGIN_SRC emacs-lisp :tangle user-config.el
       (with-eval-after-load 'mu4e

					       ; Spell checking
	 (add-hook 'mu4e-compose-mode-hook
		   (defun my-do-compose-stuff ()
		     "My settings for message composition."
		     (set-fill-column 72)
		     (flyspell-mode))
		   )
	 )
     #+END_SRC

*** Keybindings
    #+BEGIN_SRC emacs-lisp :tangle user-config.el
      (with-eval-after-load 'mu4e
	(define-key 'mu4e-headers-mode-map (kbd "TAB") 'mu4e-headers-toggle-thread-folding)
	)
    #+END_SRC

** NeoTree
   #+BEGIN_SRC emacs-lisp :tangle user-config.el
     (setq
      neo-theme 'nerd
      )
   #+END_SRC

** Org Mode
   #+BEGIN_SRC emacs-lisp :tangle user-config.el
     ;; To get Org v9 working, these fixes could be required:
     ;;
     ;; - https://emacs.stackexchange.com/questions/32001/org-babel-9-spacemacs-unable-to-evaluate-org-babel-src-blocks
     ;;
     ;; cd .emacs.d/elpa/
     ;; # I suggest to run this without "delete" first.
     ;;   find org* -name "*.elc" -delete
     ;;
     ;; - https://emacs.stackexchange.com/questions/37692/how-to-fix-symbols-function-definition-is-void-org-babel-get-header
     ;;
     ;; replace (sh . t) by (shell . t) in your call of org-babel-do-load-languages

     ; (org-babel-do-load-languages 'org-babel-load-languages
     ; 				  (append org-babel-load-languages
     ; 					  '((shell . t)
     ; 					    (python . t)
     ; 					    (C . t))))

     (setq
      org-enable-sticky-header t
      org-projectile-file "TODOs.org"
      org-want-todo-bindings t
      org-clock-into-drawer "CLOCKING"
      org-default-notes-file (concat org-directory "/Notes.org")
      )

     ;; (setq-default
     ;;  dotspacemacs-configuration-layers '((org :variables org-projectile-file "TODOs.org"))
     ;;  )

     ;; (require 'org-projectile)
     ;; (mapcar '(lambda (file)
     ;; 		(when (file-exists-p file)
     ;; 		  (push file org-agenda-files)))
     ;; 	     (org-projectile-todo-files))
   #+END_SRC

** Shell
   #+BEGIN_SRC emacs-lisp :tangle user-config.el
     (setq
      shell-default-shell 'ansi-term
      shell-default-term-shell "/bin/zsh"
      shell-default-height 30
      shell-default-position 'bottom
      )
   #+END_SRC

** Spell checking
   #+BEGIN_SRC emacs-lisp :tangle user-config.el
     (setq
      spell-checking-enable-by-default nil
      enable-flyspell-auto-completion t
      )
   #+END_SRC

   
   
